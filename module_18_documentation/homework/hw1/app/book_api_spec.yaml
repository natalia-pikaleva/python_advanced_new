openapi: 3.0.0
info:
  title: Books API
  version: 1.0.0
  description: API для управления книгами
paths:
  /api/books:
    get:
      summary: Retrieve a list of books
      tags:
        - books
      responses:
        '200':
          description: A list of books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
        '404':
          description: Book not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Book not found"
    post:
      summary: Create a new book
      tags:
        - books
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Book'
      responses:
        '201':
          description: The book has been created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Invalid input data"
    put:
      summary: Update a book by its ID
      tags:
        - books
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Book'
      responses:
        '200':
          description: The book has been updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Invalid input data"
    delete:
      summary: Delete a book by its ID
      tags:
        - books
      parameters:
        - in: path
          name: id
          required: true
          description: The ID of the book to delete.
          schema:
            type: integer
      responses:
        '200':
          description: The book has been deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Book with id 1 has been deleted."
        '404':
          description: Book not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Book not found"
    patch:
      summary: Partially update an existing book by its ID
      tags:
        - books
      parameters:
        - in: path
          name: id
          required: true
          description: The ID of the book to update.
          schema:
            type: integer
        - in: body
          name: book_updates
          required: true
          description: The fields to update in the book.
          schema:
            type: object
            properties:
              title:
                type: string
                example: "New Book Title"
              author:
                type: object
                properties:
                  first_name:
                    type: string
                    example: "John"
                  last_name:
                    type: string
                    example: "Doe"
                  middle_name:
                    type: string
                    example: "A."
      responses:
        '200':
          description: The book has been updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        '404':
          description: Book not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Book not found"
  /api/books/{id}:
    get:
      summary: Retrieve a book by ID
      tags:
        - books
      parameters:
        - in: path
          name: id
          required: true
          description: The ID of the book to retrieve.
          schema:
            type: integer
      responses:
        '200':
          description: A single book object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        '404':
          description: Book not found.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Book not found"
    put:
      summary: Update a book by its ID
      tags:
        - books
      parameters:
        - in: path
          name: id
          required: true
          description: The ID of the book to update.
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Book'
      responses:
        '200':
          description: The book has been updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Invalid input data"
      patch:
        summary: Partially update an existing book by its ID
        tags:
          - books
        parameters:
          - in: path
            name: id
            required: true
            description: The ID of the book to update.
            schema:
              type: integer
          - in: body
            name: book_updates
            required: true
            description: The fields to update in the book.
            schema:
              type: object
              properties:
                title:
                  type: string
                  example: "New Book Title"
                author:
                  type: object
                  properties:
                    first_name:
                      type: string
                      example: "John"
                    last_name:
                      type: string
                      example: "Doe"
                    middle_name:
                      type: string
                      example: "A."
        responses:
          '200':
            description: The book has been updated successfully
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Book'
          '404':
            description: Book not found
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    message:
                      type: string
                      example: "Book not found"
      delete:
        summary: Delete a book by its ID
        tags:
          - books
        parameters:
          - in: path
            name: id
            required: true
            description: The ID of the book to delete.
            schema:
              type: integer
        responses:
          '200':
            description: The book has been deleted successfully.
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    message:
                      type: string
                      example: "Book with id 1 has been deleted."
          '404':
            description: Book not found
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    message:
                      type: string
                      example: "Book not found"
components:
  schemas:

    BookSchema:
      type: object
      properties:
        id:
          type: integer

        title:
          type : string

        author :
         type : object
         properties :
           first_name :
             type : string
           last_name :
             type : string
           middle_name :
             type : string
